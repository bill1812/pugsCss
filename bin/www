#!/usr/bin/env node

// www.localModules
/** Module dependencies. @www.modules */
const app = require('../app');
const http = require('http');
const debug = require('debug')('demoapp2:server');

// www.uses

// www.exportModules
const xframeorigin = 'sameorigin'; // 'deny', [sameorigin], 'allow-from';

/** Get port from environment and store in Express. */
const port = normalizePort(process.env.PORT || '8080');
app.set('port', port);

/** Create HTTP server. */
const server = http.createServer(app);

/** Listen on provided port, on all network interfaces. */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/** Normalize a port into a number, string, or false. */
function normalizePort(val) {
  const parsedPort = parseInt(val, 10);

  if (isNaN(parsedPort)) {
    // named pipe
    return val;
  }

  if (parsedPort >= 0) {
    // port number
    return parsedPort;
  }
  return false;
}

/** Event listener for HTTP server "error" event. */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  /*! ES6 support */
  const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
    console.error(`${bind} requires elevated privileges`);
      process.exit(1);
  //  break;
    case 'EADDRINUSE':
    console.error(`${bind} is already in use`);
      process.exit(1);
  //  break;
    default:
      throw error;
  }
}

/** Event listener for HTTP server "listening" event. */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;

  // www.comfort
  console.log(`\x1b[37m\x1b[0m`, `process.env.DEBUG:`, `\x1b[32m\x1b[1m`, process.env.DEBUG, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.DEBUG_COLORS:`, `\x1b[32m\x1b[1m`, process.env.DEBUG_COLORS, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.DEBUG_DEPTH:`, `\x1b[32m\x1b[1m`, process.env.DEBUG_DEPTH, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.DEBUG_HIDE_DATE:`, `\x1b[32m\x1b[1m`, process.env.DEBUG_HIDE_DATE, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.DEBUG_SHOW_HIDDEN:`, `\x1b[32m\x1b[1m`, process.env.DEBUG_SHOW_HIDDEN, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.HOMEDRIVE:`, `\x1b[32m\x1b[1m`, process.env.HOMEDRIVE, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.HOMEPATH:`, `\x1b[32m\x1b[1m`, process.env.HOMEPATH, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.LOCALAPPDATA:`, `\x1b[32m\x1b[1m`, process.env.LOCALAPPDATA, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.NODE_DEBUG:`, `\x1b[32m\x1b[1m`, process.env.NODE_DEBUG, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.NODE_DEBUG_NATIVE:`, `\x1b[32m\x1b[1m`, process.env.NODE_DEBUG_NATIVE, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.NODE_DISABLE_COLORS:`, `\x1b[32m\x1b[1m`, process.env.NODE_DISABLE_COLORS, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.NODE_ENV:`, `\x1b[32m\x1b[1m`, process.env.NODE_ENV, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.NODE_EXTRA_CA_CERTS:`, `\x1b[32m\x1b[1m`, process.env.NODE_EXTRA_CA_CERTS, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.NODE_NO_WARNINGS:`, `\x1b[32m\x1b[1m`, process.env.NODE_NO_WARNINGS, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.NODE_OPTIONS:`, `\x1b[32m\x1b[1m`, process.env.NODE_OPTIONS, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.NODE_PATH:`, `\x1b[32m\x1b[1m`, process.env.NODE_PATH, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.OPENSSL_CONF:`, `\x1b[32m\x1b[1m`, process.env.OPENSSL_CONF, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.PORT:`, `\x1b[32m\x1b[1m`, process.env.PORT, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.TEMP:`, `\x1b[32m\x1b[1m`, process.env.TEMP, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.USERPROFILE:`, `\x1b[32m\x1b[1m`, process.env.USERPROFILE, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `process.env.windir:`, `\x1b[32m\x1b[1m`, process.env.windir, `\x1b[37m\x1b[0m`);
  console.log(`frameguard:`, `\x1b[35m\x1b\[1m`, xframeorigin, `\x1b[37m\x1b[0m`);
  console.log(`\x1b[37m\x1b[0m`, `===`, `\x1b[32m\x1b[1m`, __dirname, `\x1b[37m\x1b[0m`, `===============`);
  debug(`Debugging on:`, `\x1b[33m\x1b[1m`, bind);
  if (process.env.DEBUG === '' || process.env.DEBUG === ' ' || process.env.DEBUG === null || process.env.DEBUG === undefined) {
    console.log(`Listening on:`, `\x1b[33m\x1b[1m`, bind, `\x1b[37m\x1b[0m`);
  }
}

// www.exportModules
module.exports = xframeorigin;

/* \gen4node\templates\js\www.ejs */
